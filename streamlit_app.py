import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
@st.cache_data
def load_data():
    return pd.read_csv(r'merged.csv')

df = load_data()

# Convert date columns
df["cohort_month"] = pd.to_datetime(df["cohort_month"])
df["activity_month"] = pd.to_datetime(df["activity_month"])
df["created_at"] = pd.to_datetime(df["created_at"])
df["reimbursement_date"] = pd.to_datetime(df["reimbursement_date"], errors="coerce")
df["money_back_date"] = pd.to_datetime(df["money_back_date"], errors="coerce")

# 1. Frequency of Service Usage
freq_usage = df.groupby(["cohort_month", "activity_month"])["user_id"].count().reset_index()
freq_usage.rename(columns={"user_id": "transaction_count"}, inplace=True)

# 2. Incident Rate
incident_df = df[df["status"] == "incident"]  # Assuming "incident" marks payment issues
incident_rate = (
    incident_df.groupby(["cohort_month", "activity_month"])["user_id"]
    .count()
    .reset_index()
    .rename(columns={"user_id": "incident_count"})
)

# Merge incident rate with frequency data
cohort_analysis = pd.merge(freq_usage, incident_rate, on=["cohort_month", "activity_month"], how="left")
cohort_analysis["incident_count"] = cohort_analysis["incident_count"].fillna(0)
cohort_analysis["incident_rate"] = cohort_analysis["incident_count"] / cohort_analysis["transaction_count"]

# 3. Revenue Generated
revenue = df.groupby(["cohort_month", "activity_month"])["amount"].sum().reset_index()
revenue.rename(columns={"amount": "total_revenue"}, inplace=True)

# 4. New Metric: User Retention Rate
unique_users_per_month = df.groupby(["cohort_month", "activity_month"])["user_id"].nunique().reset_index()
unique_users_per_month.rename(columns={"user_id": "unique_users"}, inplace=True)

# Calculate User Retention Rate
first_month_users = df.groupby("cohort_month")["user_id"].nunique().reset_index()
first_month_users.rename(columns={"user_id": "initial_users"}, inplace=True)
cohort_analysis = cohort_analysis.merge(first_month_users, on="cohort_month", how="left")
cohort_analysis["initial_users"] = cohort_analysis["initial_users"].fillna(1)  # Avoid division errors

# Merge unique_users_per_month to ensure it's present
cohort_analysis = cohort_analysis.merge(unique_users_per_month, on=["cohort_month", "activity_month"], how="left", validate="one_to_one")
cohort_analysis["unique_users"] = cohort_analysis["unique_users"].fillna(0)

# Print column names for debugging
print("Columns in cohort_analysis:", cohort_analysis.columns)

# Calculate retention rate
cohort_analysis["retention_rate"] = cohort_analysis["unique_users"] / cohort_analysis["initial_users"]
print(cohort_analysis["retention_rate"])

# Merge all metrics
cohort_analysis = cohort_analysis.merge(revenue, on=["cohort_month", "activity_month"], how="left")

# Plot Frequency of Service Usage
plt.figure(figsize=(12, 6))
sns.lineplot(data=cohort_analysis, x="activity_month", y="transaction_count", hue="cohort_month", palette="tab10")
plt.title("Frequency of Service Usage by Cohort")
plt.xlabel("Month")
plt.ylabel("Number of Transactions")
plt.xticks(rotation=45)
plt.legend(title="Cohort Month", bbox_to_anchor=(1, 1))
plt.show()

# Plot Incident Rate
plt.figure(figsize=(12, 6))
sns.lineplot(data=cohort_analysis, x="activity_month", y="incident_rate", hue="cohort_month", palette="tab10")
plt.title("Incident Rate by Cohort")
plt.xlabel("Month")
plt.ylabel("Incident Rate")
plt.xticks(rotation=45)
plt.legend(title="Cohort Month", bbox_to_anchor=(1, 1))
plt.show()

# Plot Revenue Generated
plt.figure(figsize=(12, 6))
sns.lineplot(data=cohort_analysis, x="activity_month", y="total_revenue", hue="cohort_month", palette="tab10")
plt.title("Revenue Generated by Cohort")
plt.xlabel("Month")
plt.ylabel("Total Revenue")
plt.xticks(rotation=45)
plt.legend(title="Cohort Month", bbox_to_anchor=(1, 1))
plt.show()

# Plot User Retention Rate
plt.figure(figsize=(12, 6))
sns.lineplot(data=cohort_analysis, x="activity_month", y="retention_rate", hue="cohort_month", palette="tab10")
plt.title("User Retention Rate by Cohort")
plt.xlabel("Month")
plt.ylabel("Retention Rate")
plt.xticks(rotation=45)
plt.legend(title="Cohort Month", bbox_to_anchor=(1, 1))
plt.show()

# Bar Plot: Total Transactions per Cohort
plt.figure(figsize=(12, 6))
sns.barplot(data=cohort_analysis, x="cohort_month", y="transaction_count", estimator=sum, palette="viridis")
plt.title("Total Transactions per Cohort")
plt.xlabel("Cohort Month")
plt.ylabel("Total Transactions")
plt.xticks(rotation=45)
plt.show()

# Histogram: Distribution of Revenue
plt.figure(figsize=(12, 6))
sns.histplot(cohort_analysis["total_revenue"], bins=30, kde=True, color="blue")
plt.title("Revenue Distribution")
plt.xlabel("Revenue")
plt.ylabel("Frequency")
plt.show()

# Save results
cohort_analysis.to_csv("cohort_analysis_results.csv", index=False)